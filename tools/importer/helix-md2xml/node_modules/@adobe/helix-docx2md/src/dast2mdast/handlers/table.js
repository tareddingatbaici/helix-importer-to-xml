/*
 * Copyright 2019 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import { TYPE_TABLE, TYPE_HEADER, TYPE_BODY } from '@adobe/mdast-util-gridtables';
import all from '../all.js';

function gridTable(h, node) {
  let rows = all(h, node);
  if (rows[0]?.isHeader) {
    const header = [];
    while (rows[0]?.isHeader) {
      const row = rows.shift();
      delete row.isHeader;
      header.push(row);
    }
    rows = [
      h(TYPE_HEADER, header),
      h(TYPE_BODY, rows),
    ];
  }

  return h(TYPE_TABLE, rows);
}

export default function table(h, node) {
  if (h.gridtables) {
    return gridTable(h, node);
  }

  const nodes = all(h, node);

  // get alignment of first row, if any
  const align = nodes.length === 0
    ? []
    : nodes[0].children.map((c) => (c.align === 'left' ? null : c.align));

  return h('table', { align }, nodes);
}
