/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
/**
 * @param {State} state
 * @returns {Exclude<Options['listItemIndent'], null | undefined>}
 */
export function checkListItemIndent(state) {
  const style = state.options.listItemIndent || 'one';

  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
    throw new Error(
      `Cannot serialize items with \`${
        style
      }\` for \`options.listItemIndent\`, expected \`tab\`, \`one\`, or \`mixed\``,
    );
  }

  return style;
}

/**
 * @param {State} state
 * @returns {Exclude<Options['bullet'], null | undefined>}
 */
export function checkBullet(state) {
  const marker = state.options.bullet || '*';

  if (marker !== '*' && marker !== '+' && marker !== '-') {
    throw new Error(
      `Cannot serialize items with \`${
        marker
      }\` for \`options.bullet\`, expected \`*\`, \`+\`, or \`-\``,
    );
  }

  return marker;
}

/**
 * Renders a list item with 'number' support.
 * copy of: https://github.com/syntax-tree/mdast-util-to-markdown/blob/main/lib/handle/list-item.js
 *
 * @param {ListItem} node
 * @param {Parents | undefined} parent
 * @param {State} state
 * @param {Info} info
 * @returns {string}
 */
export function listItem(node, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);

  // Add the marker value for ordered lists.
  if (parent && parent.type === 'list' && parent.ordered) {
    if (node.bullet !== undefined) {
      bullet = node.bullet;
    } else {
      bullet = (typeof parent.start === 'number' && parent.start > -1
        ? parent.start
        : 1)
        + (state.options.incrementListMarker === false
          ? 0
          : parent.children.indexOf(node))
        + bullet;
    }
  }

  let size = bullet.length + 1;

  if (
    listItemIndent === 'tab'
    || (listItemIndent === 'mixed'
      && ((parent && parent.type === 'list' && parent.spread) || node.spread))
  ) {
    size = Math.ceil(size / 4) * 4;
  }

  /** @type {Map} */
  function map(line, index, blank) {
    if (index) {
      return (blank ? '' : ' '.repeat(size)) + line;
    }
    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line;
  }

  const tracker = state.createTracker(info);
  tracker.move(bullet + ' '.repeat(size - bullet.length));
  tracker.shift(size);
  const exit = state.enter('listItem');
  const value = state.indentLines(
    state.containerFlow(node, tracker.current()),
    map,
  );
  exit();

  return value;
}
