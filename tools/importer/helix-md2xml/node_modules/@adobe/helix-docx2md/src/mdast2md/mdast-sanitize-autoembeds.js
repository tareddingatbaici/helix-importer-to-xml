/*
 * Copyright 2022 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
import { visit } from 'unist-util-visit';
import { find } from 'unist-util-find';

/**
 * Sanitizes auto embeds produced by word when entering a video link. The generated content consists
 * of 2 paragraphs of link and an image to the video:
 *
 * ├─8 paragraph[1]
 * │   └─0 link[1]
 * │       │ url: "https://www.youtube.com/watch?v=7W0ISI3yqwo&vl=en"
 * │       └─0 text "All 50+ Adobe apps explained in 10 minutes"
 * └─9 paragraph[1]
 *     └─0 image
 *          url: "https://ref--repo--owner.hlx.page/media_22205a4de0c419213733ecab0b0bd555257e9e5c#image.jpeg"
 *          alt: "Video titled: All 50+ Adobe apps explained in 10 minutes"
 *
 * alternative / new format
 *
 *  ├─3 paragraph[1]
 *  │   └─0 link[1]
 *  │       │ url: "https://www.youtube.com/watch?v=FYsMExMFbh0&feature=youtu.be"
 *  │       └─0 strong[1]
 *  │           └─0 text "2021 Motion Trends from Adobe Stock | Adobe Creative Cloud"
 *  ├─4 paragraph[3]
 *  │   ├─0 text ""
 *  │   ├─1 image
 *  │   │     url: ""
 *  │   │     alt: "Video titled: 2021 Motion Trends from Adobe Stock | Adobe Creative Cloud"
 *  │   │     contentType: "image/jpeg"
 *  │   └─2 text ""
 *
 * This function collapses them to a single link:
 *
 * ├─8 paragraph[1]
 * │   └─0 link[1]
 * │       └ url: "https://www.youtube.com/watch?v=7W0ISI3yqwo&vl=en"
 *
 * @param {object} tree
 * @returns {object} The modified (original) tree.
 */
export default function sanitizeAutoEmbeds(tree) {
  visit(tree, (node, index, parent) => {
    const { children: siblings = [] } = parent || {};
    const prev = siblings[index - 1];
    if (index > 0
      // first paragraph should have children
      && prev.type === 'paragraph'
      && prev.children
      && prev.children[0]
      // second node should also be a paragraph with children
      && node.type === 'paragraph'
      && node.children
      && node.children[0]
    ) {
      // find link
      const link = find(prev, (n) => n.type === 'link');
      if (!link) {
        return visit.CONTINUE;
      }

      // get alt text
      const img = find(node, (n) => n.type === 'image');
      if (!img) {
        return visit.CONTINUE;
      }
      const { alt } = img;
      if (!alt) {
        return visit.CONTINUE;
      }

      // get link text
      const text = find(link, (n) => n.type === 'text');
      if (!text) {
        return visit.CONTINUE;
      }
      const { value } = text;
      if (!value) {
        return visit.CONTINUE;
      }

      // check if alt text contains link text (be very restrictive to avoid false positives)
      if (alt !== `Video titled: ${value}`) {
        return visit.CONTINUE;
      }

      // remove image paragraph and ensure that link is only child
      siblings.splice(index, 1);
      link.children = [{
        type: 'text',
        value: link.url,
      }];
      prev.children = [link];
      return index - 1;
    }
    return visit.CONTINUE;
  });
  return tree;
}
