/*
 * Copyright 2021 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

import {MediaHandler} from "@adobe/helix-mediahandler";
declare interface Logger {}

/**
 * @event beforeParseDocx
 * @event afterParseDocx
 * @property {object} dast parsed document AST
 *
 * @event beforeToMdast
 * @property {object} dast document AST
 *
 * @event afterToMdast
 * @property {object} mdast parsed markdown AST (mdast)
 *
 * @event beforePostProcess
 * @property {object} mdast markdown AST (mdast)
 *
 * @event afterPostProcess
 * @property {object} mdast processed markdown AST (mdast)
 *
 * @event beforeToMarkdown
 * @property {object} mdast markdown AST (mdast)
 *
 * @event afterToMarkdown
 * @property {string} md resulting markdown
 */

/**
 * Event listener that receives updates during conversion
 *
 * @callback Docx2mdListener
 * @param {string} event
 * @param {*} args optional event arguments
 * @returns {void}
 */
export type Docx2mdListener = (event: string, ...args:any) => void;

/**
 * @typedef Docx2mdastOptions
 * @param {object} [parserOptions] Options to the mammoth docx parser
 * @param {Docx2mdListener} [listener] Listener to track progress
 *
 * @see https://github.com/mwilliamson/mammoth.js/#api
 */
export declare interface Docx2mdOptions {

  log?: Logger,

  listener?: Docx2mdListener,

  mediaHandler?: MediaHandler,

  source?: string,

  parserOptions?: object;

  gridtables?: boolean;

}

/**
 * Converts a docx to markdown.
 *
 * @param {Buffer} doc - the Word document
 * @param {Docx2mdOptions} opts options
 * @returns {Promise<object>} The MDAST of the document
 */
export default function docx2md(doc: Buffer, opts: Docx2mdOptions):Promise<string>;
